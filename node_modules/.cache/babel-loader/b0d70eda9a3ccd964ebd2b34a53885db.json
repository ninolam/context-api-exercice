{"ast":null,"code":"var _jsxFileName = \"/Users/nino.lamoureux/Desktop/context-api-exercice/src/TransactionContext.js\";\nimport React, { createContext, useContext, useReducer, useState, useMemo } from 'react';\nimport TransactionReducer from './components/TransactionReducer';\nconst TransactionContext = createContext();\n\nconst TransactionProvider = props => {\n  // const [transaction, setTransaction] = useState([])\n  // const value = useMemo(() => [transaction, setTransaction], [transaction])\n  // return <TransactionContext.Provider value={value} {...props} />\n  const [state, dispatch] = useReducer(TransactionReducer, {\n    transactions: []\n  });\n  const value = useMemo(() => [state, dispatch], [state]);\n  return /*#__PURE__*/React.createElement(TransactionContext.Provider, Object.assign({\n    value: value\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }\n  }));\n};\n\nconst useTransaction = () => {\n  const context = useContext(TransactionContext);\n\n  if (!context) {\n    throw new Error(`useTransaction must be used within a CountProvider`);\n  } // return context\n\n\n  const [state, dispatch] = context;\n\n  const addTransaction = () => dispatch({\n    type: 'ADD_TRANSACTION'\n  });\n\n  return {\n    state,\n    dispatch,\n    addTransaction\n  };\n};\n\nexport { TransactionProvider, useTransaction };","map":{"version":3,"sources":["/Users/nino.lamoureux/Desktop/context-api-exercice/src/TransactionContext.js"],"names":["React","createContext","useContext","useReducer","useState","useMemo","TransactionReducer","TransactionContext","TransactionProvider","props","state","dispatch","transactions","value","useTransaction","context","Error","addTransaction","type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,UAA3C,EAAuDC,QAAvD,EAAiEC,OAAjE,QAAgF,OAAhF;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AAEA,MAAMC,kBAAkB,GAAGN,aAAa,EAAxC;;AAGA,MAAMO,mBAAmB,GAAIC,KAAD,IAAW;AACnC;AACA;AACA;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACG,kBAAD,EAAqB;AAAEM,IAAAA,YAAY,EAAE;AAAhB,GAArB,CAApC;AACA,QAAMC,KAAK,GAAGR,OAAO,CAAC,MAAM,CAACK,KAAD,EAAQC,QAAR,CAAP,EAA0B,CAACD,KAAD,CAA1B,CAArB;AACA,sBAAO,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEG;AAApC,KAA+CJ,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAEH,CATD;;AAWA,MAAMK,cAAc,GAAG,MAAM;AACzB,QAAMC,OAAO,GAAGb,UAAU,CAACK,kBAAD,CAA1B;;AACA,MAAI,CAACQ,OAAL,EAAc;AACV,UAAM,IAAIC,KAAJ,CAAW,oDAAX,CAAN;AACH,GAJwB,CAKzB;;;AACA,QAAM,CAACN,KAAD,EAAQC,QAAR,IAAoBI,OAA1B;;AACA,QAAME,cAAc,GAAG,MAAMN,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAE;AAAR,GAAD,CAArC;;AACA,SAAO;AACHR,IAAAA,KADG;AAEHC,IAAAA,QAFG;AAGHM,IAAAA;AAHG,GAAP;AAKH,CAbD;;AAeA,SAAST,mBAAT,EAA8BM,cAA9B","sourcesContent":["import React, { createContext, useContext, useReducer, useState, useMemo } from 'react';\nimport TransactionReducer from './components/TransactionReducer'\n\nconst TransactionContext = createContext()\n\n\nconst TransactionProvider = (props) => {\n    // const [transaction, setTransaction] = useState([])\n    // const value = useMemo(() => [transaction, setTransaction], [transaction])\n    // return <TransactionContext.Provider value={value} {...props} />\n\n    const [state, dispatch] = useReducer(TransactionReducer, { transactions: [] })\n    const value = useMemo(() => [state, dispatch], [state])\n    return <TransactionContext.Provider value={value} {...props} />\n\n}\n\nconst useTransaction = () => {\n    const context = useContext(TransactionContext)\n    if (!context) {\n        throw new Error(`useTransaction must be used within a CountProvider`)\n    }\n    // return context\n    const [state, dispatch] = context\n    const addTransaction = () => dispatch({ type: 'ADD_TRANSACTION' })\n    return {\n        state,\n        dispatch,\n        addTransaction,\n    }\n}\n\nexport { TransactionProvider, useTransaction }\n\n"]},"metadata":{},"sourceType":"module"}