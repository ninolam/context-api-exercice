{"ast":null,"code":"var _jsxFileName = \"/Users/nino.lamoureux/Desktop/context-api-exercice/src/components/Counter/CountContext.js\";\nimport React, { createContext, useContext, useState, useMemo } from 'react';\nconst CountContext = createContext();\n\nconst useCount = () => {\n  const context = useContext(CountContext); // if (!context) {\n  //   throw new Error(`useCount must be used within a CountProvider`)\n  // }\n\n  return context;\n};\n\nconst CountProvider = props => {\n  const [count, setCount] = useState(0);\n  const value = useMemo(() => [count, setCount], [count]);\n  return /*#__PURE__*/React.createElement(CountContext.Provider, Object.assign({\n    value: value\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }\n  }));\n};\n\nexport { CountProvider, useCount };","map":{"version":3,"sources":["/Users/nino.lamoureux/Desktop/context-api-exercice/src/components/Counter/CountContext.js"],"names":["React","createContext","useContext","useState","useMemo","CountContext","useCount","context","CountProvider","props","count","setCount","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,EAA0CC,QAA1C,EAAoDC,OAApD,QAAkE,OAAlE;AAEA,MAAMC,YAAY,GAAGJ,aAAa,EAAlC;;AAEA,MAAMK,QAAQ,GAAG,MAAM;AACrB,QAAMC,OAAO,GAAGL,UAAU,CAACG,YAAD,CAA1B,CADqB,CAErB;AACA;AACA;;AACA,SAAOE,OAAP;AACD,CAND;;AASA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAMS,KAAK,GAAGR,OAAO,CAAC,MAAM,CAACM,KAAD,EAAQC,QAAR,CAAP,EAA0B,CAACD,KAAD,CAA1B,CAArB;AACA,sBAAO,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEE;AAA9B,KAAyCH,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAJD;;AAMA,SAAQD,aAAR,EAAuBF,QAAvB","sourcesContent":["import React, {createContext, useContext, useState, useMemo} from 'react'\n\nconst CountContext = createContext()\n\nconst useCount = () => {\n  const context = useContext(CountContext)\n  // if (!context) {\n  //   throw new Error(`useCount must be used within a CountProvider`)\n  // }\n  return context\n}\n\n\nconst CountProvider = (props) => {\n  const [count, setCount] = useState(0)\n  const value = useMemo(() => [count, setCount], [count])\n  return <CountContext.Provider value={value} {...props} />\n}\n\nexport {CountProvider, useCount}\n\n"]},"metadata":{},"sourceType":"module"}